name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Chequear el código desde el repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configurar JDK para compilar el proyecto
      - name: Set up JDK 17 with Zulu
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'      # Especifica la distribución correcta (Zulu OpenJDK)
          java-version: '17'        # Versión de Java (JDK 17)
          java-package: 'jdk'       # Paquete JDK completo
          architecture: 'x64'       # Arquitectura de 64 bits

      # Paso 3: Compilar el proyecto con Maven (genera el archivo .jar en 'target/')
      - name: Build with Maven
        run: mvn clean package

      # Paso 4: Construir la imagen Docker
      - name: Build Docker image
        run: docker build -t my-docker-image:latest .

      # Paso 5: Subir el archivo .jar generado como artefacto
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-app-jar
          path: target/*.jar
      
      # Paso 6: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Paso 7: Push Docker image to GitHub Container Registry
      - name: Push Docker image
        run: docker tag my-docker-image:latest ghcr.io/${{ github.repository_owner }}/my-docker-image:latest
      - name: Push Docker image to GitHub
        run: docker push ghcr.io/${{ github.repository_owner }}/my-docker-image:latest
    
